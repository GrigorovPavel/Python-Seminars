# Базовые функции в Python

type() # это встроенная функция Python, которая в зависимости от переданных аргументов возвращает тип объектов или объект нового типа. 
# Функция type() возвращает информацию о структурах данных, используемых для хранения элементов данных в программе.

input () # позволяет получить данные от пользователя через консоль. 
# Она приостанавливает выполнение программы и ждет, пока пользователь введет данные и нажмет клавишу Enter. 
# Функция input () возвращает введенные данные в виде строки, которую можно присвоить переменной или использовать в дальнейшей обработке.

int() # Встроенная в Python функция int () возвращает целое число в десятичной системе счисления.

str() # Функция str() в Python возвращает строковую версию данного объекта.

bool()

round(3.56478, 3) # round() — встроенная функция, доступная в Python. Он вернет вам число с плавающей запятой, которое будет округлено 
# до десятичных знаков, заданных в качестве входных данных. 
# Если десятичные знаки, подлежащие округлению, не указаны, то он считается равным 0 и округляется до следующего числа.aresт целое число.

range () # range () — это встроенная функция выдает последовательность чисел на основе заданного индекса начала и остановки. 
# Если начальный индекс не указан, индекс считается равным 0, и значение будет увеличиваться до конечного индекса.

len() # len() — встроенный метод Python для нахождения длины списка. 
# На вход метод принимает один параметр: сам список. В качестве результата len() возвращает целочисленное значение — длину списка.

"""
.lower() # преобразует все символы строки в нижний регистр, а метод 
.upper() # делает все символы строки заглавными.
.replace() # Функция replace () в Python используется для создания строки путем замены некоторых частей другой строки.
"""

"""
ceil() # метод math.ceil() возвращает максимальное значение x – наименьшее целое число не меньше x.
(округляет в большую сторону, до целого числа)
"""

list() # Это функция, которая либо создает пустой список, либо приводит к списку итерируемый объект. 
# Чтобы создать пустой объект списка с помощью функции, напишите: 1 mylst = list () Обратиться к элементу. 
# Списки — это множества элементов. Чтобы обратиться к ним, указывают индекс — порядковый номер.

"""
.split() # Функция .split() в Python используется для разделения строки на список строк на основе разделителя.
# Синтаксис: str.split (sep=None, maxsplit=-1). В качестве разделителя используется аргумент sep.
input("Введите числа через пробел: ").split - будет сразу создовать список строк
"""

map() # В Python есть встроенная функция map(), которая позволяет применить заданную функцию 
# к каждому элементу в итерируемом объекте (например, в списке или словаре) и возвращает новый итератор для извлечения результатов. 
# Простыми словами. Вернет объект который можно положить в другую функцию
# Она возвращает объект map (или итератор), который затем можно использовать в других частях кода этой программы. 
# Кроме того, объект map также можно передать в функцию list () и т.п., чтобы получить итерируемый объект.
#  ПРИМЕР Task_15

min() # Функция min() в Python возвращает элемент с наименьшим значением из переданных в функцию.
max() # Aункция max() в Python возвращает наибольший элемент из переданных в функцию.


# Существует четыре метода добавления элементов в список.
# append(): добавляет элемент в конец списка
# insert(): вставляет элемент перед указанным индексом
# extend(): расширяет список, добавляя элементы из итерируемого списка
# Объединение списков: мы можем использовать оператор + для объединения нескольких списков в новый список
"""
.append() и .extend()
Если кратко, то append () добавляет в конец списка значения поодиночке, а extend () добавляет их же и туда же, но уже списками. 
Как работает append ():' a' 'b' 'c' # создали первый список 'd' >>> 'a' 'b' 'c' 'd'. 
С помощью функции append () мы добавили одиночное значение ' d ' к первому списку list_a 
и в следующей строке вывели получившийся список на экран. Как видим, в конец списка добавился ещё один элемент ' d '.
"""

"""
.insert(): Метод insert() вставляет элемент перед указанным индексом
"""

"""
.pop() Метод .pop() удаляет элемент по индексу и возвращает его. Если не указывать параметры, то будет удален последний элемент: 
Пример 
list1= [4, 3, 2, 1] 
d = list1.pop () 
print (d). В данном случае будет удалена и выведена в консоль цифра 1
"""

tuple() # Функция tuple() используется для конвертации данных в кортеж. 
# Например, так можно превратить список в кортеж. 
a_list= [1, 2, 3, 4, 5] 
b_tuple= tuple (a_list) 
print (type (b_tuple)) # < class 'tuple'>

format() # Функция format() в Python используется для создания форматированной строки из строки шаблона и предоставленных значений. 
# Синтаксис: 
"""
str.format(*args, **kwargs) 
"""
# Строка шаблона может быть строковым литералом или содержать замещающие поля с использованием {} в качестве разделителя

dict() # Функция dict() создаст словарь, инициализированный из необязательного позиционного аргумента 
# и возможно пустого набора ключевых аргументов. Если позиционный аргумент не задан, создается пустой словарь. 
# Если заданы позиционные аргументы и они являются объектами сопоставления (' one': 1), создается словарь 
# с теми же парами ключ-значение, что и объект сопоставления. В противном случае позиционный аргумент должен быть итерируемым объектом.

"""
.items() - это метод словарей в Python. Он возвращает итерируемый объект (особый DictView объект), 
позволяющий получить пары "ключ-значение" словаря. Пример: dict_example = {"a": 1, "b": 2}.
"""

