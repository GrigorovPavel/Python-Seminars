# Базовые функции в Python

type() # это встроенная функция Python, которая в зависимости от переданных аргументов возвращает тип объектов или объект нового типа. 
# Функция type() возвращает информацию о структурах данных, используемых для хранения элементов данных в программе.

input () # позволяет получить данные от пользователя через консоль. 
# Она приостанавливает выполнение программы и ждет, пока пользователь введет данные и нажмет клавишу Enter. 
# Функция input () возвращает введенные данные в виде строки, которую можно присвоить переменной или использовать в дальнейшей обработке.

int() # Встроенная в Python функция int () возвращает целое число в десятичной системе счисления.

str() # Функция str() в Python возвращает строковую версию данного объекта.

bool()

round(3.56478, 3) # round() — встроенная функция, доступная в Python. Он вернет вам число с плавающей запятой, которое будет округлено 
# до десятичных знаков, заданных в качестве входных данных. 
# Если десятичные знаки, подлежащие округлению, не указаны, то он считается равным 0 и округляется до следующего числа.aresт целое число.

range () # range () — это встроенная функция выдает последовательность чисел на основе заданного индекса начала и остановки. 
# Если начальный индекс не указан, индекс считается равным 0, и значение будет увеличиваться до конечного индекса.

len() # len() — встроенный метод Python для нахождения длины списка. 
# На вход метод принимает один параметр: сам список. В качестве результата len() возвращает целочисленное значение — длину списка.

"""
.lower() # преобразует все символы строки в нижний регистр, а метод 
.upper() # делает все символы строки заглавными.
.replace() # Функция replace () в Python используется для создания строки путем замены некоторых частей другой строки.
"""

"""
ceil() # метод math.ceil() возвращает максимальное значение x – наименьшее целое число не меньше x.
(округляет в большую сторону, до целого числа)
"""

list() # Это функция, которая либо создает пустой список, либо приводит к списку итерируемый объект. 
# Чтобы создать пустой объект списка с помощью функции, напишите: 1 mylst = list () Обратиться к элементу. 
# Списки — это множества элементов. Чтобы обратиться к ним, указывают индекс — порядковый номер.

"""
.split() # Функция .split() в Python используется для разделения строки на список строк на основе разделителя.
# Синтаксис: str.split (sep=None, maxsplit=-1). В качестве разделителя используется аргумент sep.
input("Введите числа через пробел: ").split - будет сразу создовать список строк
"""

map() # В Python есть встроенная функция map(), которая позволяет применить заданную функцию 
# к каждому элементу в итерируемом объекте (например, в списке или словаре) и возвращает новый итератор для извлечения результатов. 
# Простыми словами. Вернет объект который можно положить в другую функцию
# Она возвращает объект map (или итератор), который затем можно использовать в других частях кода этой программы. 
# Кроме того, объект map также можно передать в функцию list () и т.п., чтобы получить итерируемый объект.
#  ПРИМЕР Task_15

min() # Функция min() в Python возвращает элемент с наименьшим значением из переданных в функцию.
max() # Aункция max() в Python возвращает наибольший элемент из переданных в функцию.


# Существует четыре метода добавления элементов в список.
# append(): добавляет элемент в конец списка
# insert(): вставляет элемент перед указанным индексом
# extend(): расширяет список, добавляя элементы из итерируемого списка
# Объединение списков: мы можем использовать оператор + для объединения нескольких списков в новый список
"""
.append() и .extend()
Если кратко, то append () добавляет в конец списка значения поодиночке, а extend () добавляет их же и туда же, но уже списками. 
Как работает append ():' a' 'b' 'c' # создали первый список 'd' >>> 'a' 'b' 'c' 'd'. 
С помощью функции append () мы добавили одиночное значение ' d ' к первому списку list_a 
и в следующей строке вывели получившийся список на экран. Как видим, в конец списка добавился ещё один элемент ' d '.
"""

"""
.insert(): Метод insert() вставляет элемент перед указанным индексом
"""

"""
.pop() Метод .pop() удаляет элемент по индексу и возвращает его. Если не указывать параметры, то будет удален последний элемент: 
Пример 
list1= [4, 3, 2, 1] 
d = list1.pop () 
print (d). В данном случае будет удалена и выведена в консоль цифра 1
"""

tuple() # Функция tuple() используется для конвертации данных в кортеж. 
# Например, так можно превратить список в кортеж. 
a_list= [1, 2, 3, 4, 5] 
b_tuple= tuple (a_list) 
print (type (b_tuple)) # < class 'tuple'>

format() # Функция format() в Python используется для создания форматированной строки из строки шаблона и предоставленных значений. 
# Синтаксис: 
"""
str.format(*args, **kwargs) 
"""
# Строка шаблона может быть строковым литералом или содержать замещающие поля с использованием {} в качестве разделителя

dict() # Функция dict() создаст словарь, инициализированный из необязательного позиционного аргумента 
# и возможно пустого набора ключевых аргументов. Если позиционный аргумент не задан, создается пустой словарь. 
# Если заданы позиционные аргументы и они являются объектами сопоставления (' one': 1), создается словарь 
# с теми же парами ключ-значение, что и объект сопоставления. В противном случае позиционный аргумент должен быть итерируемым объектом.

"""
.items() - это метод словарей в Python. Он возвращает итерируемый объект (особый DictView объект), 
позволяющий получить пары "ключ-значение" словаря. Пример: dict_example = {"a": 1, "b": 2}.

.keys() - Метод keys() возвращает все ключи из словаря, но без значений.

.values() - Метод values() возвращает все значения из словаря, но без ключей.
"""

set() # - Функция set() разбивает строку на символы, а из символов формирует МНОЖЕСТВО. (удаляет одинаковые символы/элементы)
d = set('множество') 
print(d) # {' о', 'ж', 'т', 'н', 'с', 'м', 'е', 'в'}.
# Мы видим, что символы на выходе расположились в случайном порядке и убрались дубли (буква о). 
# Обратите внимание, что строка заключена в круглые скобки. 

"""
.add() - это один из волшебных методов в Python, который возвращает новый объект (третий), 
то есть добавление двух других объектов. Он реализует оператор сложения “+” на Python.
"""

"""
.remove() — это встроенный метод в Python, который удаляет первый совпадающий элемент из списка.
Синтаксис метода: 
list.remove(element)
Передается элемент, который нужно удалить из списка. Метод не возвращает значений.
Если в списке есть повторяющиеся элементы, первый совпадающий будет удалён. 
Если элемента нет, будет брошена ошибка с сообщением о том, что элемент не найден.
"""

"""
.discard() - Встроенный метод discard() в Python удаляет элемент из набора только в том случае, если он присутствует в наборе. 
Если элемент отсутствует в наборе, то ошибка или исключение не вызываются и печатается исходный набор.
"""
# Действия со множествами
"""
.copy() - Метод copy() в Python используется для создания поверхностной копии объекта. 
Он применяется к различным типам объектов, таким как списки, словари и строки, 
и позволяет создать новый объект, который является независимой копией исходного объекта.
"""

"""
.union() - Метод union() в Python объединяет элементы двух или более наборов. 
Если два или более наборов содержат одинаковый элемент, он будет появляться только один раз в возвращаемом наборе.
"""
# Пример
a = {1, 2, 3, 5, 8}
b = {2, 5, 8, 13, 21}
u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21}

"""
.intersection()  — это встроенный метод в Python, используемый для поиска пересечения между заданными множествами.
Метод set.intersection() находит пересечение двух или более двух наборов. 
Он возвращает множество, которое содержит сходство между двумя или более наборами.
"""

"""
.difference() - Метод difference() возвращает установленную разницу двух наборов.
Если A и B - два набора. Разница между наборами A и B - это набор элементов, который существует только в наборе A, но не в B.
"""
# Пример
a = {1, 2, 3, 5, 8}
b = {2, 5, 8, 13, 21}
dl = a.difference(b) # dl = {1, 3}
d2 = b.difference(a) # d2 = {13, 21}

frozenset() # - Функция frozenset() в Python принимает единственный параметр — итерируемый объект,
# который содержит элементы для инициализации Frozenset (замораживает значение).

"""
.strip() # str.strip(). Эта функция удаляет все пробелы и символы табуляции с начала и конца строки.
.lstrip() удаляет пробелы с начала строки
.rstrip() — удаляет пробелы с конца строки
"""

"""
.keys() - Метод keys() возвращает объект представления, который отображает список всех КЛЮЧЕЙ в словаре. 
Синтаксис: dict.keys(). Параметры. keys() в Python не принимает никаких параметров. Возвращаемое значение из ключей. 
Команда возвращает объект представления, который отображает список всех ключей

.values() - Python dictionary values () — это встроенная функция, которая возвращает список всех ЗНАЧЕНИЙ, 
доступных в данном словаре. Метод values () не принимает никаких параметров

"""

abs() # Функция abs() в python предназначена для получения абсолютного значения указанного числа. (убирает минус у аргумента)
# В случае, если заданное число является комплексным, функция abs() вернет его величину. 
number = -20 
absolute_number = abs(number) 
print(absolute_number) # Результат: 20. 
# Параметры функции abs(). метод abs() — принимает один единственный аргумент — число, абсолютное значение которого надо вернуть.


lambda a, b : a * b
# Лямбда функции в Python – это такие функции, которые не имеют названия. 
# Их также называют анонимными. Слово «lambda» является служебным, и не отражает сути конкретной функции. 
# Основная причина применения лямбда функций — создание функции, которая используется в коде единожды. 
# Использование таких функций позволяет снизить число строк кода, которые вам придется написать.
# Пример смотри в Example_lambda

map() # Встроенная в Python функция map() используется для применения функции к каждому элементу итерируемого объекта 
# (например, списка или словаря) и возврата нового итератора для получения результатов. 
# Функция map() возвращает объект map (итератор), который мы можем использовать в других частях нашей программы. 
# Также мы можем передать объект map в функцию list () или другой тип последовательности для создания итерируемого объекта.
#  Пример
data = '1 2 3 5 8 15 23 38' # строка
data = list(map(int, data.split())) # Создаём список в котором применяем map(int для каждого data) а к data применяем .split()  
print(data)

filter() # Функция filter() в Python применяет другую функцию к заданному итерируемому объекту 
# (список, строка, словарь и так далее), проверяя, нужно ли сохранить конкретный элемент или нет. 
# Простыми словами, она отфильтровывает то, что не проходит и возвращает все остальное. 
# Объект фильтра — это итерируемый объект. Он сохраняет те элементы, для которых функция вернула True.
# Пример
data = [x for x in range(10)] # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
res = list(filter(lambda x: x % 2 == 0, data))
print(res) # [0, 2, 4, 6, 8]

zip() # Функция zip() используется для совмещения двух и более списков в один. 
# Она возвращает итератор кортежей, где i-ый кортеж содержит i-ый элемент из каждого из переданных списков. 
# x = [1, 2, 3] y = [4, 5, 6] zipped = zip (x, y) print (list (zipped)) # Выведет: [(1, 4), (2, 5), (3, 6)]. 
# Также функция zip () может быть использована для «расстегивания» списка кортежей обратно в отдельные списки. 
# Для этого используется оператор «*».

enumerate() # Функция enumerate() добавляет счетчик к каждому элементу итерируемого объекта и возвращает перечисляемый объект. 
# В перечислении в Python вы можете указать startIndex, то есть счетчик, с которого вы хотите, чтобы значения начинались. 
# enumerate() можно использовать для перебора списка, кортежа, словаря и строки.
