# Задача №49. 
# Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Пример ввода и вывода данных представлены на
# следующем слайде

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))

# Вывод:
# 2.5 10

# Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса.

# Мой не особо красивый но рабочий код:

def s_orbits(orbits):
    pi = 3,14
    for i in orbits:
        if i[0] == i[1]:
            lst_orbits.append(0)
        else:
            lst_orbits.append(3.14 * i[0] * i[1])
    return lst_orbits   

def find_farthest_orbit(orbits):
    res = max(lst_orbits)
    for i in range(len(lst_orbits)):
        if lst_orbits[i] == res:
            return orbits[i]

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
lst_orbits = []

print(s_orbits(orbits))
print(*find_farthest_orbit(orbits))


